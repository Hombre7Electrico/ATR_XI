
Base_Tiempo_TD3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b38  08002b38  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002b38  08002b38  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b38  08002b38  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000020  08002b60  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08002b60  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099a8  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c31  00000000  00000000  000299f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002b628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142b4  00000000  00000000  0002cac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e62  00000000  00000000  00040d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007080c  00000000  00000000  00049bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba3e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  000ba460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002afc 	.word	0x08002afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002afc 	.word	0x08002afc

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fe8d 	bl	8000ea8 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fc0a 	bl	80009ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000198:	2305      	movs	r3, #5
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 f80f 	bl	80011cc <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fbfa 	bl	80009ac <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000218:	2320      	movs	r3, #32
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 fa62 	bl	80016f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b51      	ldr	r3, [pc, #324]	; (800039c <MX_GPIO_Init+0x15c>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a50      	ldr	r2, [pc, #320]	; (800039c <MX_GPIO_Init+0x15c>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b4e      	ldr	r3, [pc, #312]	; (800039c <MX_GPIO_Init+0x15c>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0310 	and.w	r3, r3, #16
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b4b      	ldr	r3, [pc, #300]	; (800039c <MX_GPIO_Init+0x15c>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a4a      	ldr	r2, [pc, #296]	; (800039c <MX_GPIO_Init+0x15c>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b48      	ldr	r3, [pc, #288]	; (800039c <MX_GPIO_Init+0x15c>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b45      	ldr	r3, [pc, #276]	; (800039c <MX_GPIO_Init+0x15c>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a44      	ldr	r2, [pc, #272]	; (800039c <MX_GPIO_Init+0x15c>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b42      	ldr	r3, [pc, #264]	; (800039c <MX_GPIO_Init+0x15c>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <MX_GPIO_Init+0x15c>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a3e      	ldr	r2, [pc, #248]	; (800039c <MX_GPIO_Init+0x15c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b3c      	ldr	r3, [pc, #240]	; (800039c <MX_GPIO_Init+0x15c>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ba:	4839      	ldr	r0, [pc, #228]	; (80003a0 <MX_GPIO_Init+0x160>)
 80002bc:	f001 fb89 	bl	80019d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T1_Pin|T2_Pin|T3_Pin|T4_Pin 
 80002c0:	2201      	movs	r2, #1
 80002c2:	f24f 0108 	movw	r1, #61448	; 0xf008
 80002c6:	4837      	ldr	r0, [pc, #220]	; (80003a4 <MX_GPIO_Init+0x164>)
 80002c8:	f001 fb83 	bl	80019d2 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d2:	4835      	ldr	r0, [pc, #212]	; (80003a8 <MX_GPIO_Init+0x168>)
 80002d4:	f001 fb7d 	bl	80019d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	4619      	mov	r1, r3
 80002f0:	482b      	ldr	r0, [pc, #172]	; (80003a0 <MX_GPIO_Init+0x160>)
 80002f2:	f001 f9fd 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PLAY_PAUSE_Pin|REC_Pin;
 80002f6:	2306      	movs	r3, #6
 80002f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fa:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <MX_GPIO_Init+0x16c>)
 80002fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4827      	ldr	r0, [pc, #156]	; (80003a8 <MX_GPIO_Init+0x168>)
 800030a:	f001 f9f1 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = T1_Pin|T2_Pin|T3_Pin|T4_Pin 
 800030e:	f24f 0308 	movw	r3, #61448	; 0xf008
 8000312:	613b      	str	r3, [r7, #16]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000314:	2311      	movs	r3, #17
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031c:	2303      	movs	r3, #3
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	481f      	ldr	r0, [pc, #124]	; (80003a4 <MX_GPIO_Init+0x164>)
 8000328:	f001 f9e2 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800032c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000332:	2311      	movs	r3, #17
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800033a:	2303      	movs	r3, #3
 800033c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	4818      	ldr	r0, [pc, #96]	; (80003a8 <MX_GPIO_Init+0x168>)
 8000346:	f001 f9d3 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PAD1_Pin|PAD2_Pin;
 800034a:	2360      	movs	r3, #96	; 0x60
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_GPIO_Init+0x16c>)
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	4619      	mov	r1, r3
 800035c:	4811      	ldr	r0, [pc, #68]	; (80003a4 <MX_GPIO_Init+0x164>)
 800035e:	f001 f9c7 	bl	80016f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	2007      	movs	r0, #7
 8000368:	f001 f98b 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800036c:	2007      	movs	r0, #7
 800036e:	f001 f9a4 	bl	80016ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	2100      	movs	r1, #0
 8000376:	2008      	movs	r0, #8
 8000378:	f001 f983 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800037c:	2008      	movs	r0, #8
 800037e:	f001 f99c 	bl	80016ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	2100      	movs	r1, #0
 8000386:	2017      	movs	r0, #23
 8000388:	f001 f97b 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800038c:	2017      	movs	r0, #23
 800038e:	f001 f994 	bl	80016ba <HAL_NVIC_EnableIRQ>

}
 8000392:	bf00      	nop
 8000394:	3720      	adds	r7, #32
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	40011000 	.word	0x40011000
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800
 80003ac:	10210000 	.word	0x10210000

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b6:	f000 fd15 	bl	8000de4 <HAL_Init>

  /* USER CODE BEGIN Init */
  for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 80003ba:	2300      	movs	r3, #0
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	e00c      	b.n	80003da <main+0x2a>
  {
	  secuencia1[i]=0;
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <main+0xac>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  secuencia2[i]=0;
 80003ca:	88fb      	ldrh	r3, [r7, #6]
 80003cc:	4a24      	ldr	r2, [pc, #144]	; (8000460 <main+0xb0>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	3301      	adds	r3, #1
 80003d8:	80fb      	strh	r3, [r7, #6]
 80003da:	88fb      	ldrh	r3, [r7, #6]
 80003dc:	2bff      	cmp	r3, #255	; 0xff
 80003de:	d9ef      	bls.n	80003c0 <main+0x10>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e0:	f000 f84c 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e4:	f7ff ff2c 	bl	8000240 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003e8:	f000 fc66 	bl	8000cb8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80003ec:	f7ff feae 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003f0:	481c      	ldr	r0, [pc, #112]	; (8000464 <main+0xb4>)
 80003f2:	f002 f802 	bl	80023fa <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Placa_Corriendo();
 80003f6:	f000 f89d 	bl	8000534 <Placa_Corriendo>

//POTE metronomo, define tempo
	  HAL_ADC_Start(&hadc1);	//CONVERSION
 80003fa:	481b      	ldr	r0, [pc, #108]	; (8000468 <main+0xb8>)
 80003fc:	f000 fe2c 	bl	8001058 <HAL_ADC_Start>
	  POTE=HAL_ADC_GetValue(&hadc1);//LEE LA CONVERSION
 8000400:	4819      	ldr	r0, [pc, #100]	; (8000468 <main+0xb8>)
 8000402:	f000 fed7 	bl	80011b4 <HAL_ADC_GetValue>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <main+0xbc>)
 800040c:	601a      	str	r2, [r3, #0]
	  POTE=(POTE*100)/447+225;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <main+0xbc>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2264      	movs	r2, #100	; 0x64
 8000414:	fb02 f303 	mul.w	r3, r2, r3
 8000418:	4a15      	ldr	r2, [pc, #84]	; (8000470 <main+0xc0>)
 800041a:	fb82 1203 	smull	r1, r2, r2, r3
 800041e:	441a      	add	r2, r3
 8000420:	1212      	asrs	r2, r2, #8
 8000422:	17db      	asrs	r3, r3, #31
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	33e1      	adds	r3, #225	; 0xe1
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <main+0xbc>)
 800042a:	6013      	str	r3, [r2, #0]
	  if(flagseq==1){
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <main+0xc4>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d104      	bne.n	800043e <main+0x8e>
	  flagseq=0;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <main+0xc4>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
	  contadorms();	//actualiza el tiempo dentro del metrónomo (1ms)
 800043a:	f000 fb71 	bl	8000b20 <contadorms>
	  }
	  Metronomo(POTE);
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <main+0xbc>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fab8 	bl	80009b8 <Metronomo>

//Secuenciador


	  BOTON_REC=FUNCION_BOTON();
 8000448:	f000 fa46 	bl	80008d8 <FUNCION_BOTON>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <main+0xc8>)
 8000452:	701a      	strb	r2, [r3, #0]


	  PLAY_PAUSE_REC();
 8000454:	f000 f8c6 	bl	80005e4 <PLAY_PAUSE_REC>
	  Placa_Corriendo();
 8000458:	e7cd      	b.n	80003f6 <main+0x46>
 800045a:	bf00      	nop
 800045c:	200004a4 	.word	0x200004a4
 8000460:	200000a4 	.word	0x200000a4
 8000464:	200008a4 	.word	0x200008a4
 8000468:	20000074 	.word	0x20000074
 800046c:	20000040 	.word	0x20000040
 8000470:	929cebf5 	.word	0x929cebf5
 8000474:	20000048 	.word	0x20000048
 8000478:	2000005c 	.word	0x2000005c

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b094      	sub	sp, #80	; 0x50
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fb2e 	bl	8002aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ac:	2301      	movs	r3, #1
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ba:	2301      	movs	r3, #1
 80004bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2302      	movs	r3, #2
 80004c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fac6 	bl	8001a64 <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004de:	f000 fa65 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	2102      	movs	r1, #2
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fd30 	bl	8001f64 <HAL_RCC_ClockConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800050a:	f000 fa4f 	bl	80009ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800050e:	2302      	movs	r3, #2
 8000510:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fe8c 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000526:	f000 fa41 	bl	80009ac <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3750      	adds	r7, #80	; 0x50
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <Placa_Corriendo>:

/* USER CODE BEGIN 4 */


void Placa_Corriendo(void){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
//Uso el sistyck para que prenda y apague el led asociado al PC13 así sé que
// el programa está corriendo.

	  if(ON==0)
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <Placa_Corriendo+0x24>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d108      	bne.n	8000552 <Placa_Corriendo+0x1e>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <Placa_Corriendo+0x28>)
 8000546:	f001 fa5c 	bl	8001a02 <HAL_GPIO_TogglePin>
		  ON=500;
 800054a:	4b03      	ldr	r3, [pc, #12]	; (8000558 <Placa_Corriendo+0x24>)
 800054c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000550:	601a      	str	r2, [r3, #0]
	  }
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000000 	.word	0x20000000
 800055c:	40011000 	.word	0x40011000

08000560 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM2){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000570:	d105      	bne.n	800057e <HAL_TIM_PeriodElapsedCallback+0x1e>
		//está preguntando si el que termino de contar es el timer 2 :)

		flagseq=1;
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
		flagb=1;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800057a:	2201      	movs	r2, #1
 800057c:	601a      	str	r2, [r3, #0]
	}

	}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	20000048 	.word	0x20000048
 800058c:	20000068 	.word	0x20000068

08000590 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
//Levanto flags según el botón que toque

 	if(GPIO_Pin==GPIO_PIN_5)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	2b20      	cmp	r3, #32
 800059e:	d102      	bne.n	80005a6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		b1=1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin==GPIO_PIN_6)
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	2b40      	cmp	r3, #64	; 0x40
 80005aa:	d102      	bne.n	80005b2 <HAL_GPIO_EXTI_Callback+0x22>
	{
		b2=1;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x48>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin==PLAY_PAUSE_Pin)
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d102      	bne.n	80005be <HAL_GPIO_EXTI_Callback+0x2e>
		{
			flag_play=1;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
		}
	if(GPIO_Pin==REC_Pin)
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d102      	bne.n	80005ca <HAL_GPIO_EXTI_Callback+0x3a>
		{
			flag_rec=1;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x50>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	601a      	str	r2, [r3, #0]

		}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	2000004c 	.word	0x2000004c
 80005d8:	20000050 	.word	0x20000050
 80005dc:	20000054 	.word	0x20000054
 80005e0:	20000058 	.word	0x20000058

080005e4 <PLAY_PAUSE_REC>:

void PLAY_PAUSE_REC(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
static t_sec PPR=PAUSA;	//Variable de maquina de estados.

	switch(PPR){
 80005ea:	4b95      	ldr	r3, [pc, #596]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d03f      	beq.n	8000672 <PLAY_PAUSE_REC+0x8e>
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	f000 80b4 	beq.w	8000760 <PLAY_PAUSE_REC+0x17c>
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d000      	beq.n	80005fe <PLAY_PAUSE_REC+0x1a>

			break;


	}
}
 80005fc:	e15e      	b.n	80008bc <PLAY_PAUSE_REC+0x2d8>
		if(BOTON_REC==PULSO_CORTO){
 80005fe:	4b91      	ldr	r3, [pc, #580]	; (8000844 <PLAY_PAUSE_REC+0x260>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d102      	bne.n	800060c <PLAY_PAUSE_REC+0x28>
			PPR=REC;
 8000606:	4b8e      	ldr	r3, [pc, #568]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 8000608:	2203      	movs	r2, #3
 800060a:	701a      	strb	r2, [r3, #0]
		if(BOTON_REC==PULSO_LARGO){
 800060c:	4b8d      	ldr	r3, [pc, #564]	; (8000844 <PLAY_PAUSE_REC+0x260>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d11f      	bne.n	8000654 <PLAY_PAUSE_REC+0x70>
					PPR=PAUSA;
 8000614:	4b8a      	ldr	r3, [pc, #552]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 800061a:	2300      	movs	r3, #0
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	e00c      	b.n	800063a <PLAY_PAUSE_REC+0x56>
						  secuencia1[i]=0;
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	4a89      	ldr	r2, [pc, #548]	; (8000848 <PLAY_PAUSE_REC+0x264>)
 8000624:	2100      	movs	r1, #0
 8000626:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						  secuencia2[i]=0;
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4a87      	ldr	r2, [pc, #540]	; (800084c <PLAY_PAUSE_REC+0x268>)
 800062e:	2100      	movs	r1, #0
 8000630:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	3301      	adds	r3, #1
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	2bff      	cmp	r3, #255	; 0xff
 800063e:	d9ef      	bls.n	8000620 <PLAY_PAUSE_REC+0x3c>
			FLAG_TIME_OUT=0;
 8000640:	4b83      	ldr	r3, [pc, #524]	; (8000850 <PLAY_PAUSE_REC+0x26c>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
			TIME_OUT=256;
 8000646:	4b83      	ldr	r3, [pc, #524]	; (8000854 <PLAY_PAUSE_REC+0x270>)
 8000648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800064c:	601a      	str	r2, [r3, #0]
			semi=0;
 800064e:	4b82      	ldr	r3, [pc, #520]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
		if(flag_play==1){	//Toco una vez, empiezo a reproducir la secuencia
 8000654:	4b81      	ldr	r3, [pc, #516]	; (800085c <PLAY_PAUSE_REC+0x278>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	f040 812a 	bne.w	80008b2 <PLAY_PAUSE_REC+0x2ce>
			PPR=PLAY;
 800065e:	4b78      	ldr	r3, [pc, #480]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 8000660:	2202      	movs	r2, #2
 8000662:	701a      	strb	r2, [r3, #0]
			flag_play=0;
 8000664:	4b7d      	ldr	r3, [pc, #500]	; (800085c <PLAY_PAUSE_REC+0x278>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
			semi=0;
 800066a:	4b7b      	ldr	r3, [pc, #492]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
		break;
 8000670:	e11f      	b.n	80008b2 <PLAY_PAUSE_REC+0x2ce>
		if(flagseq==1){	//Contador del timer, se incrementa cada 1ms
 8000672:	4b7b      	ldr	r3, [pc, #492]	; (8000860 <PLAY_PAUSE_REC+0x27c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d107      	bne.n	800068a <PLAY_PAUSE_REC+0xa6>
			  flagseq=0;
 800067a:	4b79      	ldr	r3, [pc, #484]	; (8000860 <PLAY_PAUSE_REC+0x27c>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
			  ms2++; //incrementos de milisegundos para la secuencia
 8000680:	4b78      	ldr	r3, [pc, #480]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a77      	ldr	r2, [pc, #476]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 8000688:	6013      	str	r3, [r2, #0]
		if(ms2==paso){
 800068a:	4b76      	ldr	r3, [pc, #472]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <PLAY_PAUSE_REC+0x284>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d107      	bne.n	80006a6 <PLAY_PAUSE_REC+0xc2>
			  semi++;		//Avance dentro del vector con la secuencia, definido en 60ms
 8000696:	4b70      	ldr	r3, [pc, #448]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a6e      	ldr	r2, [pc, #440]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 800069e:	6013      	str	r3, [r2, #0]
			  ms2=0;
 80006a0:	4b70      	ldr	r3, [pc, #448]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
		if(semi==TIME_OUT){
 80006a6:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <PLAY_PAUSE_REC+0x270>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d102      	bne.n	80006b8 <PLAY_PAUSE_REC+0xd4>
			  semi=0;		//Se reinicia el vector
 80006b2:	4b69      	ldr	r3, [pc, #420]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, secuencia1[semi]);
 80006b8:	4b67      	ldr	r3, [pc, #412]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a62      	ldr	r2, [pc, #392]	; (8000848 <PLAY_PAUSE_REC+0x264>)
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ca:	4868      	ldr	r0, [pc, #416]	; (800086c <PLAY_PAUSE_REC+0x288>)
 80006cc:	f001 f981 	bl	80019d2 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, secuencia2[semi]);
 80006d0:	4b61      	ldr	r3, [pc, #388]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a5d      	ldr	r2, [pc, #372]	; (800084c <PLAY_PAUSE_REC+0x268>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	2108      	movs	r1, #8
 80006e0:	4863      	ldr	r0, [pc, #396]	; (8000870 <PLAY_PAUSE_REC+0x28c>)
 80006e2:	f001 f976 	bl	80019d2 <HAL_GPIO_WritePin>
		if(BOTON_REC==1){
 80006e6:	4b57      	ldr	r3, [pc, #348]	; (8000844 <PLAY_PAUSE_REC+0x260>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d105      	bne.n	80006fa <PLAY_PAUSE_REC+0x116>
			PPR=REC;
 80006ee:	4b54      	ldr	r3, [pc, #336]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	701a      	strb	r2, [r3, #0]
			semi=0;
 80006f4:	4b58      	ldr	r3, [pc, #352]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
		if(BOTON_REC==PULSO_LARGO){
 80006fa:	4b52      	ldr	r3, [pc, #328]	; (8000844 <PLAY_PAUSE_REC+0x260>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d11f      	bne.n	8000742 <PLAY_PAUSE_REC+0x15e>
						PPR=PAUSA;
 8000702:	4b4f      	ldr	r3, [pc, #316]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 8000708:	2300      	movs	r3, #0
 800070a:	80bb      	strh	r3, [r7, #4]
 800070c:	e00c      	b.n	8000728 <PLAY_PAUSE_REC+0x144>
							  secuencia1[i]=0;
 800070e:	88bb      	ldrh	r3, [r7, #4]
 8000710:	4a4d      	ldr	r2, [pc, #308]	; (8000848 <PLAY_PAUSE_REC+0x264>)
 8000712:	2100      	movs	r1, #0
 8000714:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							  secuencia2[i]=0;
 8000718:	88bb      	ldrh	r3, [r7, #4]
 800071a:	4a4c      	ldr	r2, [pc, #304]	; (800084c <PLAY_PAUSE_REC+0x268>)
 800071c:	2100      	movs	r1, #0
 800071e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 8000722:	88bb      	ldrh	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	80bb      	strh	r3, [r7, #4]
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	2bff      	cmp	r3, #255	; 0xff
 800072c:	d9ef      	bls.n	800070e <PLAY_PAUSE_REC+0x12a>
		FLAG_TIME_OUT=0;
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <PLAY_PAUSE_REC+0x26c>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
		TIME_OUT=256;
 8000734:	4b47      	ldr	r3, [pc, #284]	; (8000854 <PLAY_PAUSE_REC+0x270>)
 8000736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073a:	601a      	str	r2, [r3, #0]
		semi=0;
 800073c:	4b46      	ldr	r3, [pc, #280]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
		if(flag_play==1){		//PAUSA
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <PLAY_PAUSE_REC+0x278>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	f040 80b5 	bne.w	80008b6 <PLAY_PAUSE_REC+0x2d2>
			PPR=PAUSA;
 800074c:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
			flag_play=0;
 8000752:	4b42      	ldr	r3, [pc, #264]	; (800085c <PLAY_PAUSE_REC+0x278>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
			semi=0;
 8000758:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
			break;
 800075e:	e0aa      	b.n	80008b6 <PLAY_PAUSE_REC+0x2d2>
		  if(flagseq==1){	//Contador del timer, se incrementa cada 1ms
 8000760:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <PLAY_PAUSE_REC+0x27c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d107      	bne.n	8000778 <PLAY_PAUSE_REC+0x194>
			  flagseq=0;
 8000768:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <PLAY_PAUSE_REC+0x27c>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
			  ms2++; //incrementos de milisegundos para la secuencia
 800076e:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 8000776:	6013      	str	r3, [r2, #0]
		  if(ms2==paso){
 8000778:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <PLAY_PAUSE_REC+0x284>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d107      	bne.n	8000794 <PLAY_PAUSE_REC+0x1b0>
			  semi++;		//Avance dentro del vector con la secuencia, definido en 60ms
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a33      	ldr	r2, [pc, #204]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 800078c:	6013      	str	r3, [r2, #0]
			  ms2=0;
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <PLAY_PAUSE_REC+0x280>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
		  if(semi==TIME_OUT){
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <PLAY_PAUSE_REC+0x270>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d102      	bne.n	80007a6 <PLAY_PAUSE_REC+0x1c2>
			  semi=0;		//Se reinicia el vector
 80007a0:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
		  if(b1==1){
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <PLAY_PAUSE_REC+0x290>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d108      	bne.n	80007c0 <PLAY_PAUSE_REC+0x1dc>
			  b1=0;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <PLAY_PAUSE_REC+0x290>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
			  secuencia1[semi]=1;
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a23      	ldr	r2, [pc, #140]	; (8000848 <PLAY_PAUSE_REC+0x264>)
 80007ba:	2101      	movs	r1, #1
 80007bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if(b2==1){
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <PLAY_PAUSE_REC+0x294>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d108      	bne.n	80007da <PLAY_PAUSE_REC+0x1f6>
			  b2=0;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <PLAY_PAUSE_REC+0x294>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
			  secuencia2[semi]=1;
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <PLAY_PAUSE_REC+0x268>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, secuencia1[semi]);
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <PLAY_PAUSE_REC+0x264>)
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ec:	481f      	ldr	r0, [pc, #124]	; (800086c <PLAY_PAUSE_REC+0x288>)
 80007ee:	f001 f8f0 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, secuencia2[semi]);
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <PLAY_PAUSE_REC+0x268>)
 80007f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	2108      	movs	r1, #8
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <PLAY_PAUSE_REC+0x28c>)
 8000804:	f001 f8e5 	bl	80019d2 <HAL_GPIO_WritePin>
		  if(BOTON_REC==PULSO_CORTO){
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <PLAY_PAUSE_REC+0x260>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d10c      	bne.n	800082a <PLAY_PAUSE_REC+0x246>
					PPR=PAUSA;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
					FLAG_TIME_OUT=1;	//Se acotó la secuencia
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <PLAY_PAUSE_REC+0x26c>)
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
					TIME_OUT=semi;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <PLAY_PAUSE_REC+0x270>)
 8000822:	6013      	str	r3, [r2, #0]
					semi=0;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <PLAY_PAUSE_REC+0x274>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
		  if(BOTON_REC==PULSO_LARGO){
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <PLAY_PAUSE_REC+0x260>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d143      	bne.n	80008ba <PLAY_PAUSE_REC+0x2d6>
							PPR=PAUSA;
 8000832:	4b03      	ldr	r3, [pc, #12]	; (8000840 <PLAY_PAUSE_REC+0x25c>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
		  for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 8000838:	2300      	movs	r3, #0
 800083a:	807b      	strh	r3, [r7, #2]
 800083c:	e02b      	b.n	8000896 <PLAY_PAUSE_REC+0x2b2>
 800083e:	bf00      	nop
 8000840:	2000000c 	.word	0x2000000c
 8000844:	2000005c 	.word	0x2000005c
 8000848:	200004a4 	.word	0x200004a4
 800084c:	200000a4 	.word	0x200000a4
 8000850:	20000064 	.word	0x20000064
 8000854:	20000008 	.word	0x20000008
 8000858:	20000044 	.word	0x20000044
 800085c:	20000054 	.word	0x20000054
 8000860:	20000048 	.word	0x20000048
 8000864:	2000003c 	.word	0x2000003c
 8000868:	20000004 	.word	0x20000004
 800086c:	40010800 	.word	0x40010800
 8000870:	40010c00 	.word	0x40010c00
 8000874:	2000004c 	.word	0x2000004c
 8000878:	20000050 	.word	0x20000050
									  secuencia1[i]=0;
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <PLAY_PAUSE_REC+0x2e0>)
 8000880:	2100      	movs	r1, #0
 8000882:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
									  secuencia2[i]=0;
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <PLAY_PAUSE_REC+0x2e4>)
 800088a:	2100      	movs	r1, #0
 800088c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for(uint16_t i=0; i<256;i++)		//inicialización de vectores de secuencia
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	3301      	adds	r3, #1
 8000894:	807b      	strh	r3, [r7, #2]
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	2bff      	cmp	r3, #255	; 0xff
 800089a:	d9ef      	bls.n	800087c <PLAY_PAUSE_REC+0x298>
			FLAG_TIME_OUT=0;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <PLAY_PAUSE_REC+0x2e8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			TIME_OUT=256;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <PLAY_PAUSE_REC+0x2ec>)
 80008a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a8:	601a      	str	r2, [r3, #0]
			semi=0;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <PLAY_PAUSE_REC+0x2f0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
			break;
 80008b0:	e003      	b.n	80008ba <PLAY_PAUSE_REC+0x2d6>
		break;
 80008b2:	bf00      	nop
 80008b4:	e002      	b.n	80008bc <PLAY_PAUSE_REC+0x2d8>
			break;
 80008b6:	bf00      	nop
 80008b8:	e000      	b.n	80008bc <PLAY_PAUSE_REC+0x2d8>
			break;
 80008ba:	bf00      	nop
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200004a4 	.word	0x200004a4
 80008c8:	200000a4 	.word	0x200000a4
 80008cc:	20000064 	.word	0x20000064
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000044 	.word	0x20000044

080008d8 <FUNCION_BOTON>:



t_pulso FUNCION_BOTON(void){ //Discrimina entre pulsar y mantener REC (REC_corto y REC_largo)
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
t_pulso RETORNO=PULSO_NULO;
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]

static int ms_boton=0;

	 switch(ESTADO_BOTON){
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <FUNCION_BOTON+0xc0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d011      	beq.n	800090e <FUNCION_BOTON+0x36>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d023      	beq.n	8000936 <FUNCION_BOTON+0x5e>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d14a      	bne.n	8000988 <FUNCION_BOTON+0xb0>

		  	 case 0:
		  	 if(flag_rec==1){
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <FUNCION_BOTON+0xc4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d141      	bne.n	800097e <FUNCION_BOTON+0xa6>
		  		 ESTADO_BOTON=1;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <FUNCION_BOTON+0xc0>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
		  		 flag_rec=0;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <FUNCION_BOTON+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
		  		 ms_boton=0;
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <FUNCION_BOTON+0xc8>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
		  	 }
		  	 break;
 800090c:	e037      	b.n	800097e <FUNCION_BOTON+0xa6>

		  	 case 1:	//anti rebote
				  	if(flagb==1){
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <FUNCION_BOTON+0xcc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d107      	bne.n	8000926 <FUNCION_BOTON+0x4e>
				  		flagb=0;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <FUNCION_BOTON+0xcc>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
				  		ms_boton++;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <FUNCION_BOTON+0xc8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <FUNCION_BOTON+0xc8>)
 8000924:	6013      	str	r3, [r2, #0]
				  	}
			if(ms_boton>29){
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <FUNCION_BOTON+0xc8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b1d      	cmp	r3, #29
 800092c:	dd29      	ble.n	8000982 <FUNCION_BOTON+0xaa>
				ESTADO_BOTON=2;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <FUNCION_BOTON+0xc0>)
 8000930:	2202      	movs	r2, #2
 8000932:	601a      	str	r2, [r3, #0]
			}
			break;
 8000934:	e025      	b.n	8000982 <FUNCION_BOTON+0xaa>

		  	case 2:
			  	if(flagb==1){
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <FUNCION_BOTON+0xcc>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d107      	bne.n	800094e <FUNCION_BOTON+0x76>
			  		flagb=0;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <FUNCION_BOTON+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
			  		ms_boton++;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <FUNCION_BOTON+0xc8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <FUNCION_BOTON+0xc8>)
 800094c:	6013      	str	r3, [r2, #0]
			  	}

		  	if(HAL_GPIO_ReadPin(REC_GPIO_Port, REC_Pin)!=0){		//boton sin presionar
 800094e:	2104      	movs	r1, #4
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <FUNCION_BOTON+0xd0>)
 8000952:	f001 f827 	bl	80019a4 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d004      	beq.n	8000966 <FUNCION_BOTON+0x8e>
		  		ESTADO_BOTON=0;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <FUNCION_BOTON+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
		  		RETORNO=PULSO_CORTO;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
		  	}
		  	if(ms_boton>=1500){		//se mantuvo presionado siempre, paso el primer if
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <FUNCION_BOTON+0xc8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f240 52db 	movw	r2, #1499	; 0x5db
 800096e:	4293      	cmp	r3, r2
 8000970:	dd09      	ble.n	8000986 <FUNCION_BOTON+0xae>
		  	ESTADO_BOTON=0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <FUNCION_BOTON+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
		  	RETORNO=PULSO_LARGO;
 8000978:	2302      	movs	r3, #2
 800097a:	71fb      	strb	r3, [r7, #7]
		  	}
		  	break;
 800097c:	e003      	b.n	8000986 <FUNCION_BOTON+0xae>
		  	 break;
 800097e:	bf00      	nop
 8000980:	e002      	b.n	8000988 <FUNCION_BOTON+0xb0>
			break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <FUNCION_BOTON+0xb0>
		  	break;
 8000986:	bf00      	nop

		  	 }
	 	 	flag_rec=0;
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <FUNCION_BOTON+0xc4>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
		  	return(RETORNO);
 800098e:	79fb      	ldrb	r3, [r7, #7]

}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000060 	.word	0x20000060
 800099c:	20000058 	.word	0x20000058
 80009a0:	2000006c 	.word	0x2000006c
 80009a4:	20000068 	.word	0x20000068
 80009a8:	40010800 	.word	0x40010800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <Metronomo>:
#include "metronomo.h"

int tiempo=1;
int ms=0;

void Metronomo(int ADC){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]



	  switch(tiempo)
 80009c0:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <Metronomo+0x15c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	f200 809f 	bhi.w	8000b0a <Metronomo+0x152>
 80009cc:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <Metronomo+0x1c>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009e5 	.word	0x080009e5
 80009d8:	08000a27 	.word	0x08000a27
 80009dc:	08000a6b 	.word	0x08000a6b
 80009e0:	08000ab3 	.word	0x08000ab3
	  {
	  case 1:
		  HAL_GPIO_WritePin(T1_GPIO_Port, T1_Pin,0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ea:	484b      	ldr	r0, [pc, #300]	; (8000b18 <Metronomo+0x160>)
 80009ec:	f000 fff1 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T1_GPIO_Port, T2_Pin,1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	4848      	ldr	r0, [pc, #288]	; (8000b18 <Metronomo+0x160>)
 80009f8:	f000 ffeb 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T1_GPIO_Port, T3_Pin,1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a02:	4845      	ldr	r0, [pc, #276]	; (8000b18 <Metronomo+0x160>)
 8000a04:	f000 ffe5 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T1_GPIO_Port, T4_Pin,1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0e:	4842      	ldr	r0, [pc, #264]	; (8000b18 <Metronomo+0x160>)
 8000a10:	f000 ffdf 	bl	80019d2 <HAL_GPIO_WritePin>

		  if(ms>=ADC){
 8000a14:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <Metronomo+0x164>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dc6e      	bgt.n	8000afc <Metronomo+0x144>
			  tiempo=2;
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <Metronomo+0x15c>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]

	}
	  break;
 8000a24:	e06a      	b.n	8000afc <Metronomo+0x144>
	  case 2:
		  HAL_GPIO_WritePin(T1_GPIO_Port, T1_Pin,1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	483a      	ldr	r0, [pc, #232]	; (8000b18 <Metronomo+0x160>)
 8000a2e:	f000 ffd0 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T2_GPIO_Port, T2_Pin,0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	4837      	ldr	r0, [pc, #220]	; (8000b18 <Metronomo+0x160>)
 8000a3a:	f000 ffca 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T3_GPIO_Port, T3_Pin,1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a44:	4834      	ldr	r0, [pc, #208]	; (8000b18 <Metronomo+0x160>)
 8000a46:	f000 ffc4 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T4_GPIO_Port, T4_Pin,1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	4831      	ldr	r0, [pc, #196]	; (8000b18 <Metronomo+0x160>)
 8000a52:	f000 ffbe 	bl	80019d2 <HAL_GPIO_WritePin>

		  if(ms>=2*ADC){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	005a      	lsls	r2, r3, #1
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <Metronomo+0x164>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dc4e      	bgt.n	8000b00 <Metronomo+0x148>
			  tiempo=3;
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <Metronomo+0x15c>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	601a      	str	r2, [r3, #0]

	}
	  break;
 8000a68:	e04a      	b.n	8000b00 <Metronomo+0x148>
	  case 3:
		  HAL_GPIO_WritePin(T1_GPIO_Port, T1_Pin,1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4829      	ldr	r0, [pc, #164]	; (8000b18 <Metronomo+0x160>)
 8000a72:	f000 ffae 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T2_GPIO_Port, T2_Pin,1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4826      	ldr	r0, [pc, #152]	; (8000b18 <Metronomo+0x160>)
 8000a7e:	f000 ffa8 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T3_GPIO_Port, T3_Pin,0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a88:	4823      	ldr	r0, [pc, #140]	; (8000b18 <Metronomo+0x160>)
 8000a8a:	f000 ffa2 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T4_GPIO_Port, T4_Pin,1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a94:	4820      	ldr	r0, [pc, #128]	; (8000b18 <Metronomo+0x160>)
 8000a96:	f000 ff9c 	bl	80019d2 <HAL_GPIO_WritePin>
		  if(ms>=3*ADC){
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	441a      	add	r2, r3
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <Metronomo+0x164>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dc2c      	bgt.n	8000b04 <Metronomo+0x14c>
			  tiempo=4;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <Metronomo+0x15c>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	601a      	str	r2, [r3, #0]

	}
	  break;
 8000ab0:	e028      	b.n	8000b04 <Metronomo+0x14c>
	  case 4:
		  HAL_GPIO_WritePin(T1_GPIO_Port, T1_Pin,1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <Metronomo+0x160>)
 8000aba:	f000 ff8a 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T2_GPIO_Port, T2_Pin,1);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac4:	4814      	ldr	r0, [pc, #80]	; (8000b18 <Metronomo+0x160>)
 8000ac6:	f000 ff84 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T3_GPIO_Port, T3_Pin,1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <Metronomo+0x160>)
 8000ad2:	f000 ff7e 	bl	80019d2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(T4_GPIO_Port, T4_Pin,0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <Metronomo+0x160>)
 8000ade:	f000 ff78 	bl	80019d2 <HAL_GPIO_WritePin>

		  if(ms>=4*ADC){
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	009a      	lsls	r2, r3, #2
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <Metronomo+0x164>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	dc0c      	bgt.n	8000b08 <Metronomo+0x150>
			  tiempo=1;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <Metronomo+0x15c>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
			  ms=0;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <Metronomo+0x164>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]

	}
	  break;
 8000afa:	e005      	b.n	8000b08 <Metronomo+0x150>
	  break;
 8000afc:	bf00      	nop
 8000afe:	e004      	b.n	8000b0a <Metronomo+0x152>
	  break;
 8000b00:	bf00      	nop
 8000b02:	e002      	b.n	8000b0a <Metronomo+0x152>
	  break;
 8000b04:	bf00      	nop
 8000b06:	e000      	b.n	8000b0a <Metronomo+0x152>
	  break;
 8000b08:	bf00      	nop
	  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000010 	.word	0x20000010
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	20000070 	.word	0x20000070

08000b20 <contadorms>:

void contadorms(void){	//Cuenta milisegundos
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	ms++;
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <contadorms+0x18>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <contadorms+0x18>)
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000070 	.word	0x20000070

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_MspInit+0x5c>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <HAL_MspInit+0x5c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6193      	str	r3, [r2, #24]
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_MspInit+0x5c>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x5c>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_MspInit+0x5c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	61d3      	str	r3, [r2, #28]
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x5c>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_MspInit+0x60>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_MspInit+0x60>)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <BusFault_Handler+0x4>

08000bbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <UsageFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern int ON;
	if(ON>0)
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SysTick_Handler+0x20>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dd04      	ble.n	8000bfe <SysTick_Handler+0x16>
	{
		ON--;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SysTick_Handler+0x20>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <SysTick_Handler+0x20>)
 8000bfc:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 f937 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000000 	.word	0x20000000

08000c0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 ff0f 	bl	8001a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f000 ff08 	bl	8001a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c2c:	2020      	movs	r0, #32
 8000c2e:	f000 ff01 	bl	8001a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c32:	2040      	movs	r0, #64	; 0x40
 8000c34:	f000 fefe 	bl	8001a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <TIM2_IRQHandler+0x10>)
 8000c42:	f001 fbfd 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200008a4 	.word	0x200008a4

08000c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <SystemInit+0x5c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <SystemInit+0x5c>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <SystemInit+0x5c>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4911      	ldr	r1, [pc, #68]	; (8000cac <SystemInit+0x5c>)
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <SystemInit+0x60>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <SystemInit+0x5c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <SystemInit+0x5c>)
 8000c72:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <SystemInit+0x5c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SystemInit+0x5c>)
 8000c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <SystemInit+0x5c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <SystemInit+0x5c>)
 8000c8e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c92:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SystemInit+0x5c>)
 8000c96:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c9a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SystemInit+0x64>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	f8ff0000 	.word	0xf8ff0000
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cde:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cec:	2213      	movs	r2, #19
 8000cee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cfe:	f001 fb51 	bl	80023a4 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d08:	f7ff fe50 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000d1a:	f001 fc99 	bl	8002650 <HAL_TIM_ConfigClockSource>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d24:	f7ff fe42 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000d36:	f001 fe5f 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d40:	f7ff fe34 	bl	80009ac <Error_Handler>
  }

}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200008a4 	.word	0x200008a4

08000d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d60:	d113      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_TIM_Base_MspInit+0x44>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <HAL_TIM_Base_MspInit+0x44>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_TIM_Base_MspInit+0x44>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	201c      	movs	r0, #28
 8000d80:	f000 fc7f 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d84:	201c      	movs	r0, #28
 8000d86:	f000 fc98 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d9a:	e003      	b.n	8000da4 <LoopCopyDataInit>

08000d9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000da0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000da2:	3104      	adds	r1, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000da8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000daa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dac:	d3f6      	bcc.n	8000d9c <CopyDataInit>
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000db0:	e002      	b.n	8000db8 <LoopFillZerobss>

08000db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000db4:	f842 3b04 	str.w	r3, [r2], #4

08000db8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dbc:	d3f9      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dbe:	f7ff ff47 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f001 fe6f 	bl	8002aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc6:	f7ff faf3 	bl	80003b0 <main>
  bx lr
 8000dca:	4770      	bx	lr
  ldr r3, =_sidata
 8000dcc:	08002b40 	.word	0x08002b40
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dd4:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8000dd8:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8000ddc:	200008e8 	.word	0x200008e8

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x28>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x28>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 fc39 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fe9c 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40022000 	.word	0x40022000

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fc51 	bl	80016d6 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 fc19 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000014 	.word	0x20000014
 8000e68:	2000001c 	.word	0x2000001c
 8000e6c:	20000018 	.word	0x20000018

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_IncTick+0x1c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_IncTick+0x20>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <HAL_IncTick+0x20>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	2000001c 	.word	0x2000001c
 8000e90:	200008e4 	.word	0x200008e4

08000e94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <HAL_GetTick+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	200008e4 	.word	0x200008e4

08000ea8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0be      	b.n	8001048 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff f96e 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fab7 	bl	8001460 <ADC_ConversionStop_Disable>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8099 	bne.w	8001036 <HAL_ADC_Init+0x18e>
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8095 	bne.w	8001036 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f14:	f023 0302 	bic.w	r3, r3, #2
 8000f18:	f043 0202 	orr.w	r2, r3, #2
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7b1b      	ldrb	r3, [r3, #12]
 8000f2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f40:	d003      	beq.n	8000f4a <HAL_ADC_Init+0xa2>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d102      	bne.n	8000f50 <HAL_ADC_Init+0xa8>
 8000f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4e:	e000      	b.n	8000f52 <HAL_ADC_Init+0xaa>
 8000f50:	2300      	movs	r3, #0
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7d1b      	ldrb	r3, [r3, #20]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d119      	bne.n	8000f94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7b1b      	ldrb	r3, [r3, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	035a      	lsls	r2, r3, #13
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e00b      	b.n	8000f94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f043 0220 	orr.w	r2, r3, #32
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	f043 0201 	orr.w	r2, r3, #1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_ADC_Init+0x1a8>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc4:	d003      	beq.n	8000fce <HAL_ADC_Init+0x126>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d104      	bne.n	8000fd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	051b      	lsls	r3, r3, #20
 8000fd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_ADC_Init+0x1ac>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d10b      	bne.n	8001014 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	f043 0201 	orr.w	r2, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001012:	e018      	b.n	8001046 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f023 0312 	bic.w	r3, r3, #18
 800101c:	f043 0210 	orr.w	r2, r3, #16
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001034:	e007      	b.n	8001046 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f043 0210 	orr.w	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	ffe1f7fd 	.word	0xffe1f7fd
 8001054:	ff1f0efe 	.word	0xff1f0efe

08001058 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Start+0x1a>
 800106e:	2302      	movs	r3, #2
 8001070:	e098      	b.n	80011a4 <HAL_ADC_Start+0x14c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f99e 	bl	80013bc <ADC_Enable>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f040 8087 	bne.w	800119a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a41      	ldr	r2, [pc, #260]	; (80011ac <HAL_ADC_Start+0x154>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d105      	bne.n	80010b6 <HAL_ADC_Start+0x5e>
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_ADC_Start+0x158>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d115      	bne.n	80010e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d026      	beq.n	800111e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e0:	e01d      	b.n	800111e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_ADC_Start+0x158>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d004      	beq.n	8001102 <HAL_ADC_Start+0xaa>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <HAL_ADC_Start+0x154>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10d      	bne.n	800111e <HAL_ADC_Start+0xc6>
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_ADC_Start+0x158>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001116:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	f023 0206 	bic.w	r2, r3, #6
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
 8001136:	e002      	b.n	800113e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 0202 	mvn.w	r2, #2
 800114e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800115a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800115e:	d113      	bne.n	8001188 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_ADC_Start+0x154>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d105      	bne.n	8001176 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_ADC_Start+0x158>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	e00c      	b.n	80011a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	e003      	b.n	80011a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40012800 	.word	0x40012800
 80011b0:	40012400 	.word	0x40012400

080011b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x20>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e0dc      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x1da>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b06      	cmp	r3, #6
 80011fa:	d81c      	bhi.n	8001236 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3b05      	subs	r3, #5
 800120e:	221f      	movs	r2, #31
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	4019      	ands	r1, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3b05      	subs	r3, #5
 8001228:	fa00 f203 	lsl.w	r2, r0, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
 8001234:	e03c      	b.n	80012b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d81c      	bhi.n	8001278 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3b23      	subs	r3, #35	; 0x23
 8001250:	221f      	movs	r2, #31
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	4019      	ands	r1, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3b23      	subs	r3, #35	; 0x23
 800126a:	fa00 f203 	lsl.w	r2, r0, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
 8001276:	e01b      	b.n	80012b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b41      	subs	r3, #65	; 0x41
 800128a:	221f      	movs	r2, #31
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	4019      	ands	r1, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b09      	cmp	r3, #9
 80012b6:	d91c      	bls.n	80012f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68d9      	ldr	r1, [r3, #12]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	3b1e      	subs	r3, #30
 80012ca:	2207      	movs	r2, #7
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4019      	ands	r1, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6898      	ldr	r0, [r3, #8]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	3b1e      	subs	r3, #30
 80012e4:	fa00 f203 	lsl.w	r2, r0, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	e019      	b.n	8001326 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6919      	ldr	r1, [r3, #16]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	2207      	movs	r2, #7
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	4019      	ands	r1, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6898      	ldr	r0, [r3, #8]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	fa00 f203 	lsl.w	r2, r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b10      	cmp	r3, #16
 800132c:	d003      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001332:	2b11      	cmp	r3, #17
 8001334:	d132      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d125      	bne.n	800138c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d126      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800135c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b10      	cmp	r3, #16
 8001364:	d11a      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	0c9a      	lsrs	r2, r3, #18
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800137c:	e002      	b.n	8001384 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3b01      	subs	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f9      	bne.n	800137e <HAL_ADC_ConfigChannel+0x1b2>
 800138a:	e007      	b.n	800139c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f043 0220 	orr.w	r2, r3, #32
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40012400 	.word	0x40012400
 80013b4:	20000014 	.word	0x20000014
 80013b8:	431bde83 	.word	0x431bde83

080013bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d039      	beq.n	800144e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0201 	orr.w	r2, r2, #1
 80013e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <ADC_Enable+0x9c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1b      	ldr	r2, [pc, #108]	; (800145c <ADC_Enable+0xa0>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013f8:	e002      	b.n	8001400 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f9      	bne.n	80013fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001406:	f7ff fd45 	bl	8000e94 <HAL_GetTick>
 800140a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800140c:	e018      	b.n	8001440 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800140e:	f7ff fd41 	bl	8000e94 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d911      	bls.n	8001440 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f043 0210 	orr.w	r2, r3, #16
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e007      	b.n	8001450 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d1df      	bne.n	800140e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000014 	.word	0x20000014
 800145c:	431bde83 	.word	0x431bde83

08001460 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b01      	cmp	r3, #1
 8001478:	d127      	bne.n	80014ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800148a:	f7ff fd03 	bl	8000e94 <HAL_GetTick>
 800148e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001490:	e014      	b.n	80014bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001492:	f7ff fcff 	bl	8000e94 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d90d      	bls.n	80014bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f043 0210 	orr.w	r2, r3, #16
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e007      	b.n	80014cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d0e3      	beq.n	8001492 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4906      	ldr	r1, [pc, #24]	; (800156c <__NVIC_EnableIRQ+0x34>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff90 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff2d 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff42 	bl	800151c <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff35 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b08b      	sub	sp, #44	; 0x2c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e127      	b.n	8001954 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001704:	2201      	movs	r2, #1
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	429a      	cmp	r2, r3
 800171e:	f040 8116 	bne.w	800194e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b12      	cmp	r3, #18
 8001728:	d034      	beq.n	8001794 <HAL_GPIO_Init+0xa4>
 800172a:	2b12      	cmp	r3, #18
 800172c:	d80d      	bhi.n	800174a <HAL_GPIO_Init+0x5a>
 800172e:	2b02      	cmp	r3, #2
 8001730:	d02b      	beq.n	800178a <HAL_GPIO_Init+0x9a>
 8001732:	2b02      	cmp	r3, #2
 8001734:	d804      	bhi.n	8001740 <HAL_GPIO_Init+0x50>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d031      	beq.n	800179e <HAL_GPIO_Init+0xae>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d01c      	beq.n	8001778 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173e:	e048      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001740:	2b03      	cmp	r3, #3
 8001742:	d043      	beq.n	80017cc <HAL_GPIO_Init+0xdc>
 8001744:	2b11      	cmp	r3, #17
 8001746:	d01b      	beq.n	8001780 <HAL_GPIO_Init+0x90>
          break;
 8001748:	e043      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800174a:	4a89      	ldr	r2, [pc, #548]	; (8001970 <HAL_GPIO_Init+0x280>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d026      	beq.n	800179e <HAL_GPIO_Init+0xae>
 8001750:	4a87      	ldr	r2, [pc, #540]	; (8001970 <HAL_GPIO_Init+0x280>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d806      	bhi.n	8001764 <HAL_GPIO_Init+0x74>
 8001756:	4a87      	ldr	r2, [pc, #540]	; (8001974 <HAL_GPIO_Init+0x284>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d020      	beq.n	800179e <HAL_GPIO_Init+0xae>
 800175c:	4a86      	ldr	r2, [pc, #536]	; (8001978 <HAL_GPIO_Init+0x288>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01d      	beq.n	800179e <HAL_GPIO_Init+0xae>
          break;
 8001762:	e036      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001764:	4a85      	ldr	r2, [pc, #532]	; (800197c <HAL_GPIO_Init+0x28c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0xae>
 800176a:	4a85      	ldr	r2, [pc, #532]	; (8001980 <HAL_GPIO_Init+0x290>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d016      	beq.n	800179e <HAL_GPIO_Init+0xae>
 8001770:	4a84      	ldr	r2, [pc, #528]	; (8001984 <HAL_GPIO_Init+0x294>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0xae>
          break;
 8001776:	e02c      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e028      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e023      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3308      	adds	r3, #8
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e01e      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	330c      	adds	r3, #12
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e019      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a6:	2304      	movs	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e012      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	611a      	str	r2, [r3, #16]
          break;
 80017be:	e008      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	615a      	str	r2, [r3, #20]
          break;
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2bff      	cmp	r3, #255	; 0xff
 80017d6:	d801      	bhi.n	80017dc <HAL_GPIO_Init+0xec>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	e001      	b.n	80017e0 <HAL_GPIO_Init+0xf0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3304      	adds	r3, #4
 80017e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2bff      	cmp	r3, #255	; 0xff
 80017e6:	d802      	bhi.n	80017ee <HAL_GPIO_Init+0xfe>
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x104>
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	3b08      	subs	r3, #8
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	210f      	movs	r1, #15
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	401a      	ands	r2, r3
 8001806:	6a39      	ldr	r1, [r7, #32]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	431a      	orrs	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8096 	beq.w	800194e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001822:	4b59      	ldr	r3, [pc, #356]	; (8001988 <HAL_GPIO_Init+0x298>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_GPIO_Init+0x298>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6193      	str	r3, [r2, #24]
 800182e:	4b56      	ldr	r3, [pc, #344]	; (8001988 <HAL_GPIO_Init+0x298>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183a:	4a54      	ldr	r2, [pc, #336]	; (800198c <HAL_GPIO_Init+0x29c>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4b      	ldr	r2, [pc, #300]	; (8001990 <HAL_GPIO_Init+0x2a0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x19e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_GPIO_Init+0x2a4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x19a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a49      	ldr	r2, [pc, #292]	; (8001998 <HAL_GPIO_Init+0x2a8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x196>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a48      	ldr	r2, [pc, #288]	; (800199c <HAL_GPIO_Init+0x2ac>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x192>
 800187e:	2303      	movs	r3, #3
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x1a0>
 8001882:	2304      	movs	r3, #4
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x1a0>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x1a0>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x1a0>
 800188e:	2300      	movs	r3, #0
 8001890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001892:	f002 0203 	and.w	r2, r2, #3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018a0:	493a      	ldr	r1, [pc, #232]	; (800198c <HAL_GPIO_Init+0x29c>)
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4938      	ldr	r1, [pc, #224]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4933      	ldr	r1, [pc, #204]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	492e      	ldr	r1, [pc, #184]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
 80018ee:	e006      	b.n	80018fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4929      	ldr	r1, [pc, #164]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	4924      	ldr	r1, [pc, #144]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
 8001916:	e006      	b.n	8001926 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	43db      	mvns	r3, r3
 8001920:	491f      	ldr	r1, [pc, #124]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 8001922:	4013      	ands	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	491a      	ldr	r1, [pc, #104]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	60cb      	str	r3, [r1, #12]
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	4915      	ldr	r1, [pc, #84]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 800194a:	4013      	ands	r3, r2
 800194c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f aed0 	bne.w	8001704 <HAL_GPIO_Init+0x14>
  }
}
 8001964:	bf00      	nop
 8001966:	372c      	adds	r7, #44	; 0x2c
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	10210000 	.word	0x10210000
 8001974:	10110000 	.word	0x10110000
 8001978:	10120000 	.word	0x10120000
 800197c:	10310000 	.word	0x10310000
 8001980:	10320000 	.word	0x10320000
 8001984:	10220000 	.word	0x10220000
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	40010800 	.word	0x40010800
 8001994:	40010c00 	.word	0x40010c00
 8001998:	40011000 	.word	0x40011000
 800199c:	40011400 	.word	0x40011400
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e001      	b.n	80019c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]
 80019de:	4613      	mov	r3, r2
 80019e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e2:	787b      	ldrb	r3, [r7, #1]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ee:	e003      	b.n	80019f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	041a      	lsls	r2, r3, #16
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	611a      	str	r2, [r3, #16]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd9c 	bl	8000590 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e26c      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e246      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff f9a8 	bl	8000e94 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f9a4 	bl	8000e94 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1fa      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff f994 	bl	8000e94 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f990 	bl	8000e94 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1e6      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1ba      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f949 	bl	8000e94 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff f945 	bl	8000e94 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e19b      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f928 	bl	8000e94 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f924 	bl	8000e94 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e17a      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff f908 	bl	8000e94 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff f904 	bl	8000e94 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e15a      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 faa8 	bl	80021fc <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f8ee 	bl	8000e94 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f8ea 	bl	8000e94 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e140      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b9e      	ldr	r3, [pc, #632]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b97      	ldr	r3, [pc, #604]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b94      	ldr	r3, [pc, #592]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a93      	ldr	r2, [pc, #588]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b91      	ldr	r3, [pc, #580]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a8a      	ldr	r2, [pc, #552]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f8ab 	bl	8000e94 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff f8a7 	bl	8000e94 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0fd      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a75      	ldr	r2, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a6c      	ldr	r2, [pc, #432]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a63      	ldr	r2, [pc, #396]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff f85b 	bl	8000e94 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff f857 	bl	8000e94 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0ab      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff f845 	bl	8000e94 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff f841 	bl	8000e94 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e095      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b48      	ldr	r3, [pc, #288]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8081 	beq.w	8001f4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff f815 	bl	8000e94 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff f811 	bl	8000e94 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e067      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	492d      	ldr	r1, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	4927      	ldr	r1, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe ffe5 	bl	8000e94 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe ffe1 	bl	8000e94 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e037      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e02f      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ffce 	bl	8000e94 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe ffca 	bl	8000e94 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e020      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e018      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e013      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	42420060 	.word	0x42420060

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7fe ff1e 	bl	8000e94 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe ff1a 	bl	8000e94 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4601      	mov	r1, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	fa21 f303 	lsr.w	r3, r1, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1cc>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe7c 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	08002b28 	.word	0x08002b28
 8002130:	20000014 	.word	0x20000014
 8002134:	20000018 	.word	0x20000018

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b490      	push	{r4, r7}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002140:	1d3c      	adds	r4, r7, #4
 8002142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x46>
 8002176:	e02d      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e02d      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800218a:	4413      	add	r3, r2
 800218c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002190:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c5b      	lsrs	r3, r3, #17
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021aa:	4413      	add	r3, r2
 80021ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b6:	fb02 f203 	mul.w	r2, r2, r3
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e004      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	623b      	str	r3, [r7, #32]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	6a3b      	ldr	r3, [r7, #32]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc90      	pop	{r4, r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	08002b14 	.word	0x08002b14
 80021ec:	08002b24 	.word	0x08002b24
 80021f0:	40021000 	.word	0x40021000
 80021f4:	007a1200 	.word	0x007a1200
 80021f8:	003d0900 	.word	0x003d0900

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000014 	.word	0x20000014
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d07d      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002258:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a4b      	ldr	r2, [pc, #300]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227c:	2301      	movs	r3, #1
 800227e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d118      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a42      	ldr	r2, [pc, #264]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002298:	f7fe fdfc 	bl	8000e94 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	e008      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fdf8 	bl	8000e94 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e06d      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d02e      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d027      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ec:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d014      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7fe fdc7 	bl	8000e94 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe fdc3 	bl	8000e94 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e036      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ee      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4917      	ldr	r1, [pc, #92]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	4313      	orrs	r3, r2
 800233c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	490b      	ldr	r1, [pc, #44]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4904      	ldr	r1, [pc, #16]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
 80023a0:	42420440 	.word	0x42420440

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01d      	b.n	80023f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fcc0 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 fa10 	bl	8002808 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b06      	cmp	r3, #6
 8002422:	d007      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0202 	mvn.w	r2, #2
 800246c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f9a4 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f997 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f9a6 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0204 	mvn.w	r2, #4
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f97a 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f96d 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f97c 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0208 	mvn.w	r2, #8
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f950 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f943 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f952 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0210 	mvn.w	r2, #16
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2208      	movs	r2, #8
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f926 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f919 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f928 	bl	80027e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0201 	mvn.w	r2, #1
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fd ffce 	bl	8000560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa51 	bl	8002a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8ec 	bl	80027f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0220 	mvn.w	r2, #32
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa1c 	bl	8002a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_TIM_ConfigClockSource+0x18>
 8002664:	2302      	movs	r3, #2
 8002666:	e0a6      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x166>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800268e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d067      	beq.n	8002770 <HAL_TIM_ConfigClockSource+0x120>
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d80b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x6c>
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d073      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x140>
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d802      	bhi.n	80026b2 <HAL_TIM_ConfigClockSource+0x62>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d06f      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026b0:	e078      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d06c      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x140>
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d06a      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026ba:	e073      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d00d      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0x8c>
 80026c0:	2b70      	cmp	r3, #112	; 0x70
 80026c2:	d804      	bhi.n	80026ce <HAL_TIM_ConfigClockSource+0x7e>
 80026c4:	2b50      	cmp	r3, #80	; 0x50
 80026c6:	d033      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0xe0>
 80026c8:	2b60      	cmp	r3, #96	; 0x60
 80026ca:	d041      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026cc:	e06a      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	d066      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x152>
 80026d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d8:	d017      	beq.n	800270a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026da:	e063      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f000 f965 	bl	80029ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	609a      	str	r2, [r3, #8]
      break;
 8002708:	e04c      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f000 f94e 	bl	80029ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800272c:	609a      	str	r2, [r3, #8]
      break;
 800272e:	e039      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	461a      	mov	r2, r3
 800273e:	f000 f8c5 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2150      	movs	r1, #80	; 0x50
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f91c 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 800274e:	e029      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	461a      	mov	r2, r3
 800275e:	f000 f8e3 	bl	8002928 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2160      	movs	r1, #96	; 0x60
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f90c 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 800276e:	e019      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	461a      	mov	r2, r3
 800277e:	f000 f8a5 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2140      	movs	r1, #64	; 0x40
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f8fc 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 800278e:	e009      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 f8f3 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 80027a0:	e000      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80027a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <TIM_Base_SetConfig+0xb8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00b      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d007      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <TIM_Base_SetConfig+0xbc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <TIM_Base_SetConfig+0xc0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d108      	bne.n	800284a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <TIM_Base_SetConfig+0xb8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <TIM_Base_SetConfig+0xbc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <TIM_Base_SetConfig+0xc0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <TIM_Base_SetConfig+0xb8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	615a      	str	r2, [r3, #20]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800

080028cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 030a 	bic.w	r3, r3, #10
 8002908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f023 0210 	bic.w	r2, r3, #16
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	031b      	lsls	r3, r3, #12
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	621a      	str	r2, [r3, #32]
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f043 0307 	orr.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	021a      	lsls	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	431a      	orrs	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e032      	b.n	8002a76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <__libc_init_array>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2500      	movs	r5, #0
 8002aa8:	4e0c      	ldr	r6, [pc, #48]	; (8002adc <__libc_init_array+0x38>)
 8002aaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ae0 <__libc_init_array+0x3c>)
 8002aac:	1ba4      	subs	r4, r4, r6
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	42a5      	cmp	r5, r4
 8002ab2:	d109      	bne.n	8002ac8 <__libc_init_array+0x24>
 8002ab4:	f000 f822 	bl	8002afc <_init>
 8002ab8:	2500      	movs	r5, #0
 8002aba:	4e0a      	ldr	r6, [pc, #40]	; (8002ae4 <__libc_init_array+0x40>)
 8002abc:	4c0a      	ldr	r4, [pc, #40]	; (8002ae8 <__libc_init_array+0x44>)
 8002abe:	1ba4      	subs	r4, r4, r6
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	42a5      	cmp	r5, r4
 8002ac4:	d105      	bne.n	8002ad2 <__libc_init_array+0x2e>
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002acc:	4798      	blx	r3
 8002ace:	3501      	adds	r5, #1
 8002ad0:	e7ee      	b.n	8002ab0 <__libc_init_array+0xc>
 8002ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad6:	4798      	blx	r3
 8002ad8:	3501      	adds	r5, #1
 8002ada:	e7f2      	b.n	8002ac2 <__libc_init_array+0x1e>
 8002adc:	08002b38 	.word	0x08002b38
 8002ae0:	08002b38 	.word	0x08002b38
 8002ae4:	08002b38 	.word	0x08002b38
 8002ae8:	08002b3c 	.word	0x08002b3c

08002aec <memset>:
 8002aec:	4603      	mov	r3, r0
 8002aee:	4402      	add	r2, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memset+0xa>
 8002af4:	4770      	bx	lr
 8002af6:	f803 1b01 	strb.w	r1, [r3], #1
 8002afa:	e7f9      	b.n	8002af0 <memset+0x4>

08002afc <_init>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr

08002b08 <_fini>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr
